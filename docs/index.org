#+title: Orgify: Emacs static site generator
#+layout: layout.tpl.html

* Installation

Orgify is designed to be run as a script (via =emacs --script=). If
you care about running this script in CI, you need to include a
=`package-install'= step to fetch Orgify before running
=`orgify-build'=. Otherwise, install Orgify as a normal Emacs package
and you're good to go.

** Emacs 29

With Emacs 29 you can install packages directly from git repositories:

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (package-refresh-contents)

  (use-package orgify
    :vc (:fetcher sourcehut :repo mgmarlow/orgify))

  (orgify-build)
#+end_src

** Earlier Emacs versions

First, clone Orgify to a directory:

#+begin_src shell
  git clone https://git.sr.ht/~mgmarlow/orgify /path/to/orgify
#+end_src

In your Emacs script, add Orgify to the load path before calling
=`orgify-build'=:

#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/orgify")
  (require 'orgify)
  (orgify-build)
#+end_src

* Using Orgify

Create a new build script, =build.el=, to publish your files. Note
that Orgify must be installed as a package or available on your
=`load-path'= before you can require it.

#+begin_src emacs-lisp
  (orgify-build)
#+end_src

And then execute that script:

#+begin_src shell
  emacs --script build.el
#+end_src

** Project layout

Project layout is flexible (see Configuration options), but Orgify
does support a no-configuration default structure:

#+begin_src shell
  my-project/
    posts/
      2023-07-01-my-first-post.org
    public/
      404.html
      favicon.io
    my_layout.html
    index.org
    build.el
#+end_src

- All files ending with =.org= are transformed to HTML during the
  build process. Parent directories (like =posts/=) are preserved.
- =public/= is a special folder (configured via =:static-dir=) that
  contains your static files. This folder is copied into the output
  directory as-is, so it should contain your styles, favicons,
  robots.txt, etc.
- All other files are left behind.

** Configuration options

=`orgify-build'= accepts the following keyword arguments:

  - =:base-dir=: Directory where Orgify searches for =.org=
    files. Defaults to current directory (="*"=).
  - =:out-dir=: Build destination for the final HTML site. Defaults to
    ="output/"=.
  - =:static-dir=: Static files that are copied into the output folder
    as-is. Defaults to ="public/"=.

** Keywords and layouts

Orgify supports a handlebars-like templating language, allowing you to
pass keywords from your org-mode files into your HTML templates.

For example, this org file:

#+begin_src org
  #+title: My first post
  #+layout: my_layout.html

  * Hello world!
#+end_src

That's pointing to this template:

#+begin_src html
  <!-- my_layout.html -->
  <html lang="en">
    <head>
      <title>{{ title }}</title>
    </head>
    <body>
      <main>{{ content }}</main>
    </body>
  </html>
#+end_src

Renders this as final output

#+begin_src html
  <html lang="en">
    <head>
      <title>My first post</title>
    </head>
    <body>
      <main><h2>Hello world!</h2></main>
    </body>
  </html>
#+end_src

*** Protected keywords

There are some keywords in Orgify that behave in special ways:

- =content=: The HTML output of your org file.
- =layout=: Path to the HTML template that lays out the current org
  file. Defaults to Orgify's Simple.css template.
- =options=: The same as =ox-html= options, used during =org->html=
  conversion. e.g. =toc:nil= avoids generating a table of contents.

All other user-defined keywords are fair game.

* Examples

- [[https://git.sr.ht/~mgmarlow/orgify/tree/main/item/build-docs.el][This documentation]]

* Kudos/prior art

- [[https://simplecss.org/][Simple.css]] for the default template theme.
- [[https://orgmode.org/][ox-html]] for the hard work converting org to HTML.
