#+title: Orgify: Emacs static site generator

* Installation

Orgify is designed to be run as a script (via =emacs --script=). If
you care about running this script in CI, you need to include a
=`package-install'= step to fetch Orgify before running
=`orgify-build'=. Otherwise, install Orgify as a normal Emacs package
and you're good to go.

** Emacs 29

With Emacs 29 you can install packages directly from git repositories:

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (package-refresh-contents)

  (use-package orgify
    :vc (:fetcher sourcehut :repo mgmarlow/orgify))

  (orgify-build)
#+end_src

** Earlier Emacs versions

First, clone Orgify to a directory:

#+begin_src shell
  git clone https://git.sr.ht/~mgmarlow/orgify /path/to/orgify
#+end_src

In your Emacs script, add Orgify to the load path before calling
=`orgify-build'=:

#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/orgify")
  (require 'orgify)
  (orgify-build)
#+end_src

* Using Orgify

Create a new build script to publish your files:

#+begin_src emacs-lisp
  ;; build.el
  (orgify-build)
#+end_src

Execute that script:

#+begin_src shell
  emacs --script build.el
#+end_src

** Project layout

By default, Orgify expects your project layout to look something like
this:

#+begin_src shell
  my-project/
    posts/
      2023-07-01-my-first-post.org
    public/
      404.html
      favicon.io
    index.org
    build.el
#+end_src

Note that the =posts/= directory is not significant, it's just to
demonstrate that directory structure is preserved when building your
site.

All files ending in =.org= are transformed to HTML via
=ox-html=. Static files in =public/= are copied into the output
directory as-is. Each of these directories is configurable via keyword
arguments to =`orgify-build'=.

** Configuration options

  - =:base-dir=: Directory where =orgify.el= searches for =.org= files.
  - =:out-dir=: Build destination for the HTML site.
  - =:static-dir=: Static files that are copied into the output folder as-is.

Example:

  #+begin_src emacs-lisp
    (orgify-build
     :base-dir "docs/"
     :out-dir "dist/"
     :static-dir "docs/public/")
#+end_src

** HTML templates

Call =`setq'= on =`orgify-default-template'= to configure your HTML
template.

(this is subject to change when multiple template support is added)

*** Org-mode keywords

Orgify supports a handlebars-like syntax, allowing you to pass
keywords from your org-mode files into your HTML templates. Only one
template is currently supported, accessible via the
=`orgify-default-template'= variable.

Any keyword defined on your org-mode file (with two exceptions
outlined below) is available to your HTML layout via curly braces.
For example, the =#+title:= attribute from the following org file is
provided to the template via ={{ title }}=.

#+begin_src org
  #+title: My first post
  #+options: toc:nil

  * Hello world!
#+end_src

=content= and =options= are protected keywords.

- =content= is the HTML body content of your org file.
- =options= allows you to configure options for =ox-html=, like
  disabling table of contents generation via =toc:nil=.

* Examples

The documentation you're currently reading is built with Orgify: [[https://git.sr.ht/~mgmarlow/orgify/tree/main/item/build-docs.el][build-docs.el]].

* Kudos/prior art

- [[https://simplecss.org/][Simple.css]] for the default template theme.
- [[https://orgmode.org/][ox-html]] for the hard work converting org to HTML.
